from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_, not_
from sqlalchemy.ext.asyncio import AsyncSession
import random

from src.database.models import User, Profile

router = Router()

@router.message(Command("find"))
async def cmd_find(message: Message, session: AsyncSession):
    # Get user's profile
    query = select(Profile).join(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    user_profile = result.scalar_one_or_none()
    
    if not user_profile:
        await message.answer(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
        )
        return
    
    # Find random profile that is not the user's own
    query = select(Profile).join(User).where(
        and_(
            User.telegram_id != message.from_user.id,
            User.is_active == True
        )
    )
    result = await session.execute(query)
    profiles = result.scalars().all()
    
    if not profiles:
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!"
        )
        return
    
    # Select random profile
    random_profile = random.choice(profiles)
    
    # Format profile info
    interests = [interest.name for interest in random_profile.interests]
    
    text = (
        f"üë§ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:\n\n"
        f"–ò–º—è: {random_profile.name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {random_profile.age}\n"
        f"–í–£–ó: {random_profile.university}\n"
        f"–û —Å–µ–±–µ: {random_profile.bio}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests)}\n\n"
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ?"
    )
    
    # Create inline keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"like_{random_profile.user_id}"),
            InlineKeyboardButton(text="üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
        ]
    ])
    
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("like_"))
async def process_like(callback: CallbackQuery, session: AsyncSession):
    target_user_id = int(callback.data.split("_")[1])
    
    # Get target user's profile
    query = select(Profile).join(User).where(User.id == target_user_id)
    result = await session.execute(query)
    target_profile = result.scalar_one_or_none()
    
    if not target_profile:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        await callback.message.delete()
        return
    
    # Get current user's profile
    query = select(Profile).join(User).where(User.telegram_id == callback.from_user.id)
    result = await session.execute(query)
    current_profile = result.scalar_one_or_none()
    
    # Format message for target user
    target_text = (
        f"üëã –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
        f"–ò–º—è: {current_profile.name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {current_profile.age}\n"
        f"–í–£–ó: {current_profile.university}\n"
        f"–û —Å–µ–±–µ: {current_profile.bio}\n\n"
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ?"
    )
    
    # Create inline keyboard for target user
    target_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"match_{callback.from_user.id}"),
            InlineKeyboardButton(text="üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject")
        ]
    ])
    
    # Send notification to target user
    await callback.bot.send_message(
        target_profile.user.telegram_id,
        target_text,
        reply_markup=target_keyboard
    )
    
    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await callback.message.delete()

@router.callback_query(F.data == "skip")
async def process_skip(callback: CallbackQuery):
    await callback.answer("–ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    await callback.message.delete()
    await cmd_find(callback.message, callback.bot.get("session"))

@router.callback_query(F.data.startswith("match_"))
async def process_match(callback: CallbackQuery, session: AsyncSession):
    target_user_id = int(callback.data.split("_")[1])
    
    # Get both users' profiles
    query = select(Profile).join(User).where(User.id == target_user_id)
    result = await session.execute(query)
    target_profile = result.scalar_one_or_none()
    
    query = select(Profile).join(User).where(User.telegram_id == callback.from_user.id)
    result = await session.execute(query)
    current_profile = result.scalar_one_or_none()
    
    if not target_profile or not current_profile:
        await callback.answer("–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        await callback.message.delete()
        return
    
    # Notify both users about the match
    match_text = (
        "üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
        "–£–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )
    
    await callback.bot.send_message(target_profile.user.telegram_id, match_text)
    await callback.message.edit_text(match_text)
    
    # TODO: Implement chat functionality or direct message forwarding 