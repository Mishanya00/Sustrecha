from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.database.models import User, Profile, Interest
from src.config import Settings

router = Router()
settings = Settings()

class ProfileEdit(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_university = State()
    waiting_for_bio = State()
    waiting_for_interests = State()

@router.message(Command("profile"))
async def cmd_profile(message: Message, session: AsyncSession):
    # Get user profile
    query = select(Profile).join(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    profile = result.scalar_one_or_none()
    
    if not profile:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è:"
        )
        await ProfileEdit.waiting_for_name.set()
        return
    
    # Format profile info
    interests = [interest.name for interest in profile.interests]
    
    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ò–º—è: {profile.name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile.age}\n"
        f"–í–£–ó: {profile.university}\n"
        f"–û —Å–µ–±–µ: {profile.bio}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests)}\n\n"
        "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/edit_name - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n"
        "/edit_age - –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç\n"
        "/edit_university - –∏–∑–º–µ–Ω–∏—Ç—å –í–£–ó\n"
        "/edit_bio - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "/edit_interests - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã"
    )
    
    await message.answer(text)

@router.message(Command("edit_name"))
async def cmd_edit_name(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await ProfileEdit.waiting_for_name.set()

@router.message(ProfileEdit.waiting_for_name)
async def process_name(message: Message, state: FSMContext, session: AsyncSession):
    name = message.text.strip()
    
    if len(name) < 2 or len(name) > 50:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Update or create profile
    query = select(Profile).join(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    profile = result.scalar_one_or_none()
    
    if profile:
        profile.name = name
    else:
        user = await session.get(User, message.from_user.id)
        profile = Profile(
            user_id=user.id,
            name=name
        )
        session.add(profile)
    
    await session.commit()
    await state.clear()
    
    await message.answer(
        f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (18-30):"
    )
    await ProfileEdit.waiting_for_age.set()

@router.message(ProfileEdit.waiting_for_age)
async def process_age(message: Message, state: FSMContext, session: AsyncSession):
    try:
        age = int(message.text.strip())
        if age < settings.MIN_AGE or age > settings.MAX_AGE:
            await message.answer(
                f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {settings.MIN_AGE} –¥–æ {settings.MAX_AGE} –ª–µ—Ç. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Update profile
    query = select(Profile).join(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    profile = result.scalar_one_or_none()
    
    if profile:
        profile.age = age
        await session.commit()
    
    await state.clear()
    
    await message.answer(
        "‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –í–£–ó–∞:"
    )
    await ProfileEdit.waiting_for_university.set()

# TODO: Implement other profile edit handlers (university, bio, interests) 