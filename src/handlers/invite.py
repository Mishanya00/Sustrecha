from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.database.models import User, InviteCode
from src.config import Settings

router = Router()
settings = Settings()

@router.message(Command("invite"))
async def cmd_invite(message: Message, session: AsyncSession):
    # Get user's invite codes
    query = select(InviteCode).where(
        InviteCode.creator_id == message.from_user.id
    )
    result = await session.execute(query)
    invite_codes = result.scalars().all()
    
    # Count active (unused) codes
    active_codes = [code for code in invite_codes if not code.is_used]
    
    if len(active_codes) >= settings.MAX_INVITE_CODES:
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤ (3).\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –∫–æ–º–∞–Ω–¥–æ–π /revoke_invite"
        )
        return
    
    # Create new invite code
    new_code = InviteCode(creator_id=message.from_user.id)
    session.add(new_code)
    await session.commit()
    
    await message.answer(
        f"üéâ –í–æ—Ç –≤–∞—à –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥: `{new_code.code}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É.\n"
        "–ö–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n\n"
        "–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {settings.MAX_INVITE_CODES - len(active_codes) - 1} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤.",
        parse_mode="Markdown"
    )

@router.message(Command("revoke_invite"))
async def cmd_revoke_invite(message: Message, session: AsyncSession):
    # Get user's unused invite codes
    query = select(InviteCode).where(
        InviteCode.creator_id == message.from_user.id,
        InviteCode.is_used == False
    )
    result = await session.execute(query)
    unused_codes = result.scalars().all()
    
    if not unused_codes:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤ –¥–ª—è –æ—Ç–∑—ã–≤–∞.")
        return
    
    # TODO: Implement code selection and revocation
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –¥–ª—è –æ—Ç–∑—ã–≤–∞:\n" +
        "\n".join(f"{i+1}. {code.code}" for i, code in enumerate(unused_codes))
    )

@router.message(Command("my_invites"))
async def cmd_my_invites(message: Message, session: AsyncSession):
    # Get all user's invite codes
    query = select(InviteCode).where(
        InviteCode.creator_id == message.from_user.id
    )
    result = await session.execute(query)
    invite_codes = result.scalars().all()
    
    if not invite_codes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤.")
        return
    
    # Format message
    active_codes = [code for code in invite_codes if not code.is_used]
    used_codes = [code for code in invite_codes if code.is_used]
    
    text = "üìã –í–∞—à–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã:\n\n"
    
    if active_codes:
        text += "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:\n"
        for code in active_codes:
            text += f"‚Ä¢ `{code.code}`\n"
        text += "\n"
    
    if used_codes:
        text += "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã:\n"
        for code in used_codes:
            text += f"‚Ä¢ `{code.code}` (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {code.used_at.strftime('%d.%m.%Y')})\n"
    
    await message.answer(text, parse_mode="Markdown") 