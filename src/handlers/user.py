import random

from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from src.config import settings
from src.service.db_service import ServiceDB
from src.states import UserRoadmap
from src.keyboards.reply import go_to_main_menu, go_to_check_token


user_router = Router()


@user_router.message(UserRoadmap.start)
async def user_start(message: Message, state: FSMContext):
    pass


@user_router.message(UserRoadmap.get_token)
async def user_get_token(message: Message, state: FSMContext):
    await state.set_state(UserRoadmap.check_token)
    await message.answer(
        "–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!",
        reply_markup=ReplyKeyboardRemove(),
    )


@user_router.message(UserRoadmap.check_token)
async def user_check_token(message: Message, state: FSMContext):
    if message.text:
        if message.text == settings.ADMIN_TOKEN or await ServiceDB.is_valid_code(message.text):
            try:
                await ServiceDB.add_user(message.from_user.id)
                await state.set_state(UserRoadmap.main_menu)
                await message.answer(
                    "Welcome to the club, buddy!",
                    reply_markup=go_to_main_menu(),
                )
            except Exception:
                await state.clear()
                await message.answer("Smth is wrong")
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –∏–Ω–≤–∞–π—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        await message.answer("–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!")


@user_router.message(UserRoadmap.main_menu)
async def user_main_menu(message: Message, state: FSMContext):
    await message.answer(
        "–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
        reply_markup=ReplyKeyboardRemove(),
    )



user_messages_mm = [
    "–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòà",
    "–ó–∞—á–µ–º —Ç—ã —É–¥–∞–ª–∏–ª –Ω–∞—à —á–∞—Ç!? –ù—É –ª–∞–¥–Ω–æ, –∑–∞—Ö–æ–¥–∏, —è —Å–æ—Å–∫—É—á–∏–ª—Å—è ü•π",
    "–ö–∞–∫–∏–µ –ª—é–¥–∏ –≤ –ì–æ–ª–ª–∏–≤—É–¥–µ! –ü—Ä–æ—Ö–æ–¥–∏!",
    "–ó–∞–ª–µ—Ç–∞–π ‚úàÔ∏è",
]


@user_router.message()
async def user_message(message: Message, state: FSMContext):
    if await ServiceDB.is_user_exist_by_tgid(message.from_user.id):
        await message.answer(
            random.choice(user_messages_mm),
            reply_markup=go_to_main_menu(),
        )
        await state.set_state(UserRoadmap.main_menu)
    else:
        await message.answer(
            "–°—é–¥–∞ –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é, –Ω—É-–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏–∫–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üïµüèø‚Äç‚ôÇÔ∏è",
            reply_markup=go_to_check_token(),
        )
        await state.set_state(UserRoadmap.get_token)